import os
import json
import base64
import hashlib
import getpass
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import secrets
import string

# Generate a strong password
def generate_password(length=16):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(chars) for _ in range(length))

# Key Derivation Function (KDF) to derive key from master password
def derive_key(master_password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashlib.sha256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(master_password.encode())

# Encrypt password
def encrypt_password(password, key):
    iv = os.urandom(16)  # Initialization vector
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_password = encryptor.update(password.encode()) + encryptor.finalize()
    return base64.urlsafe_b64encode(iv + encrypted_password).decode()

# Decrypt password
def decrypt_password(encrypted_password, key):
    encrypted_password = base64.urlsafe_b64decode(encrypted_password.encode())
    iv = encrypted_password[:16]
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_password = decryptor.update(encrypted_password[16:]) + decryptor.finalize()
    return decrypted_password.decode()

# Load vault data from file
def load_vault(file_name="vault.json"):
    if os.path.exists(file_name):
        with open(file_name, "r") as file:
            return json.load(file)
    return {}

# Save vault data to file
def save_vault(vault_data, file_name="vault.json"):
    with open(file_name, "w") as file:
        json.dump(vault_data, file)

# Add password to vault
def add_password(vault, category, service, encrypted_password):
    if category not in vault:
        vault[category] = {}
    vault[category][service] = encrypted_password

# Retrieve password from vault
def retrieve_password(vault, category, service):
    return vault.get(category, {}).get(service)

# Password Manager main loop
def password_manager():
    print("Welcome to the Secure Password Manager")
    vault = load_vault()
    
    # Master password input (or you can hash and store the master password securely)
    master_password = getpass.getpass("Enter your master password: ")
    
    # Salt generation and key derivation (you can store salt securely for real use cases)
    salt = os.urandom(16)
    key = derive_key(master_password, salt)
    
    while True:
        print("\nOptions: \n1. Add new password \n2. Retrieve password \n3. Generate strong password \n4. Exit")
        option = input("Choose an option: ")
        
        if option == "1":
            category = input("Enter category (e.g., social, email, banking): ")
            service = input("Enter service name (e.g., Gmail, Facebook): ")
            password = getpass.getpass(f"Enter the password for {service}: ")
            encrypted_password = encrypt_password(password, key)
            add_password(vault, category, service, encrypted_password)
            save_vault(vault)
            print(f"Password for {service} in {category} added successfully.")
        
        elif option == "2":
            category = input("Enter category: ")
            service = input("Enter service name: ")
            encrypted_password = retrieve_password(vault, category, service)
            if encrypted_password:
                decrypted_password = decrypt_password(encrypted_password, key)
                print(f"The password for {service} is: {decrypted_password}")
            else:
                print(f"No password found for {service} in {category}.")

        elif option == "3":
            length = int(input("Enter the desired password length (e.g., 16): "))
            generated_password = generate_password(length)
            print(f"Generated password: {generated_password}")
        
        elif option == "4":
            print("Exiting Password Manager. Stay secure!")
            break

        else:
            print("Invalid option. Please try again.")

# Run the Password Manager
password_manager()
